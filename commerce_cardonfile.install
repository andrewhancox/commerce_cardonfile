<?php

/**
 * @file
 * Installs the tables required by Commerce Card on File.
 */

/**
 * Implements hook_uninstall().
 */
function commerce_cardonfile_uninstall() {
  field_delete_field('commerce_cardonfile_profile');
  // Purge field data now to allow cardonfile module to be uninstalled
  // if this is the only field remaining.
  field_purge_batch(10);
}

/**
 * Implements hook_schema().
 */
function commerce_cardonfile_schema() {
  $schema = array();
  $schema['commerce_cardonfile'] = array(
    'description' => 'Stores truncated card data with references to the full card data stored at payment gateways.',
    'fields' => array(
      'card_id' => array(
        'description' => 'Serial numeric ID of the truncated card data in the local database.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'uid' => array(
        'description' => 'The {users}.uid that supplied this card data.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'payment_method' => array(
        'description' => 'The payment method method_id for this transaction.',
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
      ),
      'instance_id' => array(
        'description' => 'The payment method instance ID for this transaction.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'remote_id' => array(
        'description' => 'The remote ID to the full card data at the payment gateway.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'card_type' => array(
        'description' => 'The credit card type.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'card_name' => array(
        'description' => 'The name on the credit card.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'card_number' => array(
        'description' => 'Truncated number of the credit card (last 4 digits).',
        'type' => 'varchar',
        'length' => 4,
        'not null' => TRUE,
        'default' => '',
      ),
      'card_exp_month' => array(
        'description' => 'Expiration month of the credit card.',
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
      ),
      'card_exp_year' => array(
        'description' => 'Expiration year of the credit card.',
        'type' => 'int',
        'size' => 'small',
        'not null' => TRUE,
        'default' => 0,
      ),
      'status' => array(
        'description' => 'Status of the card data: inactive (0), active (1), or active and not deletable (2).',
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
      ),
      'created' => array(
        'description' => 'The Unix timestamp when the card data was first stored.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'changed' => array(
        'description' => 'The Unix timestamp when the card data was last updated.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'instance_default' => array(
        'description' => 'Boolean indicating the default card for a payment instance ID.',
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('card_id'),
    'indexes' => array(
      'uid' => array('uid'),
      'instance_id' => array('instance_id'),
    ),
    'foreign keys' => array(
      'creator' => array(
        'table' => 'users',
        'columns' => array('uid' => 'uid'),
      ),
    ),
  );

  return $schema;
}

/**
 * Add the instance_default column to card data table
 */
function commerce_cardonfile_update_7101(&$sandbox) {
  if (!db_field_exists('commerce_card_data', 'instance_default')) {
    db_add_field('commerce_card_data', 'instance_default', array(
    'description' => 'Boolean indicating the default card for a payment instance ID.',
    'type' => 'int',
    'size' => 'tiny',
    'not null' => TRUE,
    'default' => 0,
    ));
  }

  return t('Card data table has been updated.');
}

/**
 * Update permission from 'manage' to 'view', 'edit', 'delete'.
 */
function commerce_cardonfile_update_7102(&$sandbox) {
  // Load utility functions.
  module_load_install('commerce');

  // Retrieve existing permissions.
  $result = db_select('role_permission', 'p')
    ->fields('p')
    ->condition('permission', 'manage own card data')
    ->execute();

  $records = $result->fetchAll(PDO::FETCH_ASSOC);
  if (empty($records)) {
    return t('No permissions to update.');
  }

  // Update permission and views access from 'manaage' to 'view'.
  $map = array(
    'manage own card data' => 'view own card data',
  );
  commerce_update_rename_permissions($map);

  // Create 'edit' and 'delete' for 'manage' permissions to mimic old access.
  $inserts = array();
  foreach ($records as $record) {
    $inserts[] = array('permission' => 'edit own card data') + $record;
    $inserts[] = array('permission' => 'delete own card data') + $record;
  }

  $query = db_insert('role_permission')->fields(array('rid', 'permission', 'module'));
  foreach ($inserts as $insert) {
    $query->values($insert);
  }
  $query->execute();

  return t('Role and custom View permissions updated to new permissions. Access checks in modules and permissions on default Views must be updated manually.');
}

/**
 * Change the card on file table name.
 */
function commerce_cardonfile_update_7103(&$sandbox) {
  if (db_table_exists('commerce_card_data')) {
    db_rename_table('commerce_card_data', 'commerce_cardonfile');
  }

  return t('Card data table has been updated.');
}
